/*
 * This file is generated by jOOQ.
 */
package sparkJava.generated.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import sparkJava.generated.Keys;
import sparkJava.generated.Public;
import sparkJava.generated.tables.records.BookRequestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRequest extends TableImpl<BookRequestRecord> {

    private static final long serialVersionUID = -23947514;

    /**
     * The reference instance of <code>public.book_request</code>
     */
    public static final BookRequest BOOK_REQUEST = new BookRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRequestRecord> getRecordType() {
        return BookRequestRecord.class;
    }

    /**
     * The column <code>public.book_request.id</code>.
     */
    public final TableField<BookRequestRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('book_request_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.book_request.title</code>.
     */
    public final TableField<BookRequestRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.book_request.first_name</code>.
     */
    public final TableField<BookRequestRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.book_request.email</code>.
     */
    public final TableField<BookRequestRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.book_request</code> table reference
     */
    public BookRequest() {
        this(DSL.name("book_request"), null);
    }

    /**
     * Create an aliased <code>public.book_request</code> table reference
     */
    public BookRequest(String alias) {
        this(DSL.name(alias), BOOK_REQUEST);
    }

    /**
     * Create an aliased <code>public.book_request</code> table reference
     */
    public BookRequest(Name alias) {
        this(alias, BOOK_REQUEST);
    }

    private BookRequest(Name alias, Table<BookRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookRequest(Name alias, Table<BookRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BookRequest(Table<O> child, ForeignKey<O, BookRequestRecord> key) {
        super(child, key, BOOK_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<BookRequestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BOOK_REQUEST;
    }

    @Override
    public BookRequest as(String alias) {
        return new BookRequest(DSL.name(alias), this);
    }

    @Override
    public BookRequest as(Name alias) {
        return new BookRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookRequest rename(String name) {
        return new BookRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookRequest rename(Name name) {
        return new BookRequest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
