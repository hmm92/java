/*
 * This file is generated by jOOQ.
 */
package sparkJava.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import sparkJava.generated.tables.Refresh;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefreshRecord extends UpdatableRecordImpl<RefreshRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = -353390536;

    /**
     * Setter for <code>public.refresh.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.refresh.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.refresh.counter</code>.
     */
    public void setCounter(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.refresh.counter</code>.
     */
    public Integer getCounter() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Refresh.REFRESH.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Refresh.REFRESH.COUNTER;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCounter();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCounter();
    }

    @Override
    public RefreshRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public RefreshRecord value2(Integer value) {
        setCounter(value);
        return this;
    }

    @Override
    public RefreshRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RefreshRecord
     */
    public RefreshRecord() {
        super(Refresh.REFRESH);
    }

    /**
     * Create a detached, initialised RefreshRecord
     */
    public RefreshRecord(Integer id, Integer counter) {
        super(Refresh.REFRESH);

        set(0, id);
        set(1, counter);
    }
}
