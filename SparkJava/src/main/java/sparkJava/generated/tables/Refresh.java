/*
 * This file is generated by jOOQ.
 */
package sparkJava.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import sparkJava.generated.Keys;
import sparkJava.generated.Public;
import sparkJava.generated.tables.records.RefreshRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Refresh extends TableImpl<RefreshRecord> {

    private static final long serialVersionUID = -792593775;

    /**
     * The reference instance of <code>public.refresh</code>
     */
    public static final Refresh REFRESH = new Refresh();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefreshRecord> getRecordType() {
        return RefreshRecord.class;
    }

    /**
     * The column <code>public.refresh.id</code>.
     */
    public final TableField<RefreshRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.refresh.counter</code>.
     */
    public final TableField<RefreshRecord, Integer> COUNTER = createField(DSL.name("counter"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.refresh</code> table reference
     */
    public Refresh() {
        this(DSL.name("refresh"), null);
    }

    /**
     * Create an aliased <code>public.refresh</code> table reference
     */
    public Refresh(String alias) {
        this(DSL.name(alias), REFRESH);
    }

    /**
     * Create an aliased <code>public.refresh</code> table reference
     */
    public Refresh(Name alias) {
        this(alias, REFRESH);
    }

    private Refresh(Name alias, Table<RefreshRecord> aliased) {
        this(alias, aliased, null);
    }

    private Refresh(Name alias, Table<RefreshRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Refresh(Table<O> child, ForeignKey<O, RefreshRecord> key) {
        super(child, key, REFRESH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RefreshRecord> getPrimaryKey() {
        return Keys.REFRESH_PKEY;
    }

    @Override
    public List<UniqueKey<RefreshRecord>> getKeys() {
        return Arrays.<UniqueKey<RefreshRecord>>asList(Keys.REFRESH_PKEY);
    }

    @Override
    public Refresh as(String alias) {
        return new Refresh(DSL.name(alias), this);
    }

    @Override
    public Refresh as(Name alias) {
        return new Refresh(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Refresh rename(String name) {
        return new Refresh(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Refresh rename(Name name) {
        return new Refresh(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
